{
    "ReactJS": [
        {
            "id": 1,
            "question": "Why does useState used? What is the purpose it?",
            "answer": "`useState` is a React Hook that allows functional components to manage and update state. It is used when you need to introduce state variables in functional components to keep track of data that can change over time. The purpose of `useState` is to enable components to have their own state, making them dynamic and responsive to user interactions."
        },
        {
            "id": 2,
            "question": "Can you pass data from child to parents?",
            "answer": "In React, data can be passed from child to parent components through callback functions. The parent component can pass a function as a prop to the child, and the child can invoke this function with the data as an argument. This way, the child communicates with the parent by triggering a function defined in the parent component."
        },
        {
            "id": 3,
            "question": "Tell me the best 5 ways of passing data from parents to child?",
            "answer": "The common ways to pass data from parent to child in React are through props, context, refs, function callbacks, and using a state management library like Redux or MobX."
        },
        {
            "id": 4,
            "question": "Why does MongoDB used with React.JS? Why not others?",
            "answer": "MongoDB is a NoSQL database that is often used with React.js due to its flexibility and scalability. React.js is a front-end library, and the choice of the database is independent of it. Developers may choose MongoDB for its JSON-like document structure, scalability, and ease of integration with Node.js, which is often used alongside React."
        },
        {
            "id": 5,
            "question": "What is React.JS?",
            "answer": "React.js is a JavaScript library developed by Facebook for building user interfaces. It allows developers to create reusable UI components that efficiently update and render in response to data changes. React uses a declarative approach and employs a virtual DOM to optimize rendering performance."
        },
        {
            "id": 6,
            "question": "Tell me some advantages and disadvantages of React.JS?",
            "answer": "Advantages: Reusable components, virtual DOM for efficient updates, strong community support, JSX for declarative syntax. Disadvantages: Learning curve for beginners, potential performance bottlenecks with large applications, and it's just a library, not a full framework."
        },
        {
            "id": 7,
            "question": "What is Redux and its uses?",
            "answer": "Redux is a state management library for JavaScript applications, often used with React. It provides a predictable state container, making it easier to manage and update application state in a consistent way. Redux is especially useful for large and complex applications where managing state can become challenging."
        },
        {
            "id": 8,
            "question": "What do you know about React Native?",
            "answer": "React Native is a framework for building mobile applications using React. It allows developers to write components using React syntax and deploy them as native mobile app elements. This enables cross-platform development, where a single codebase can be used to create applications for both iOS and Android platforms."
        },
        {
            "id": 9,
            "question": "What do you know about Higher Order Component? Give me some examples of it?",
            "answer": "A Higher-Order Component (HOC) is a design pattern in React that involves wrapping a component with a function to enhance or modify its behavior. HOCs are a powerful tool for code reuse, abstraction, and separation of concerns. They enable you to extend or modify the functionality of a component without changing its source code.\n\nExamples of HOCs:\n\n1. **withCounter HOC:** Adds count state and an increment function to a component.\n2. **withAuthentication HOC:** Ensures a component is only rendered when the user is authenticated.\n3. **withDataFetching HOC:** Fetches data and provides it to the wrapped component."
        },
        {
            "id": 10,
            "question": "What does `useEffect` and `useState` return?",
            "answer": "`useEffect` returns a cleanup function that can be used to perform cleanup tasks when the component unmounts or when the dependencies specified in the dependency array change. `useState` returns an array with two elements: the current state value and a function to update the state."
        },
        {
            "id": 11,
            "question": "Tell me about React Lifecycle?",
            "answer": "The React component lifecycle consists of three main phases: Mounting, Updating, and Unmounting. Each phase has lifecycle methods like `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` that developers can use to perform actions at specific points in a component's lifecycle."
        },
        {
            "id": 12,
            "question": "How do props and state work?",
            "answer": "Props are data passed from parent to child components, while state is used to manage a component's internal data that can change over time. Props are immutable, and changes to them in the parent component trigger a re-render in the child. State, on the other hand, is mutable and is managed within the component itself."
        },
        {
            "id": 13,
            "question": "Why do we use React.JS?",
            "answer": "React.js is used for building dynamic, efficient, and scalable user interfaces. It simplifies the process of creating UI components, encourages code reusability, and provides a declarative approach to building UIs, making it easier to understand and maintain large codebases."
        },
        {
            "id": 14,
            "question": "How does React.JS optimized?",
            "answer": "React.js is optimized through the use of a virtual DOM, which allows for efficient updates by minimizing direct manipulation of the actual DOM. Additionally, React employs various performance optimization techniques like memoization, shouldComponentUpdate, and the PureComponent class to avoid unnecessary renders."
        },
        {
            "id": 15,
            "question": "What is React.JS state management?",
            "answer": "React.JS state management involves handling and updating the internal state of components. State can be managed using the `useState` hook for functional components or the `setState` method for class components. For more complex applications, state management libraries like Redux or Context API may be used."
        },
        {
            "id": 16,
            "question": "How does JSX work?",
            "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to XML or HTML. It allows developers to write HTML-like code in JavaScript files. JSX is then transpiled to JavaScript using tools like Babel before being rendered by the browser. It provides a more concise and readable way to describe the structure of UI components."
        },
        {
            "id": 17,
            "question": "What is Redux-flux?",
            "answer": "Redux and Flux are separate state management libraries/architectures. Redux is a predictable state container for JavaScript applications, while Flux is a pattern for managing state in a predictable way. They share some concepts but are distinct. Redux provides a single store with a unidirectional data flow, while Flux can have multiple stores."
        },
        {
            "id": 18,
            "question": "What is the difference between Virtual DOM and Real DOM?",
            "answer": "The Virtual DOM is a lightweight copy of the Real DOM that React uses to perform efficient updates. While the Real DOM represents the actual structure of a webpage and can be slow to update, the Virtual DOM allows React to calculate the minimum number of changes needed and update only those elements, improving performance."
        },
        {
            "id": 19,
            "question": "How does `useEffect` work, and how is it used with dependencies?",
            "answer": "`useEffect` is used for side effects in functional components, such as data fetching or subscriptions. It takes a function that contains the code for the side effect. The second argument is an array of dependencies. If any dependency changes, the effect is re-run. If the array is empty, the effect runs only once, similar to `componentDidMount` in class components."
        },
        {
            "id": 20,
            "question": "What is props drilling?",
            "answer": "Props drilling occurs when props need to be passed through multiple layers of nested components to reach a deeply nested child component. While this is a common pattern in React, it can lead to code that is hard to maintain. To address this, context or state management tools like Redux can be used to avoid passing props through many layers."
        },
        {
            "id": 21,
            "question": "How does React.JS re-render binding?",
            "answer": "React components re-render when their state or props change. When binding functions in a component, it's essential to bind them in the constructor or use arrow functions."
        },
        {
            "id": 22,
            "question": "Why does use useHistory?",
            "answer": "The `useHistory` hook is part of the `react-router-dom` library and is used for navigating between different pages or views in a React application. It provides access to the history object, allowing you to programmatically navigate, go back, or go forward in the application's history."
        },
        {
            "id": 23,
            "question": "What is state, component, and DOM?",
            "answer": "In React, state refers to the internal data managed by a component that can change over time. A component is a reusable and self-contained building block of a React application. DOM (Document Object Model) is the tree-like structure that represents the HTML elements of a web page, and React uses a virtual DOM to optimize updates."
        },
        {
            "id": 24,
            "question": "How does React.JS work?",
            "answer": "React.js works by creating a virtual DOM representation of the user interface. When the state or props of a component change, React efficiently calculates the minimum number of changes needed in the virtual DOM and updates only those elements. The virtual DOM changes are then reconciled with the real DOM for efficient rendering."
        },
        {
            "id": 25,
            "question": "What is React hooks?",
            "answer": "React hooks are functions that enable functional components to use state and lifecycle features that were previously available only in class components. Hooks, like `useState` and `useEffect`, allow developers to manage state and perform side effects in functional components."
        },
        {
            "id": 26,
            "question": "Explain some react.js hooks?",
            "answer": "React.js provides various hooks to enable functional components to use state and lifecycle features. Some commonly used hooks include `useState` for managing state, `useEffect` for handling side effects, `useContext` for accessing the context, and `useReducer` for more complex state logic."
        },
        {
            "id": 27,
            "question": "What is state?",
            "answer": "In React, state refers to the internal data that a component can maintain. It represents the current condition of the component and can change over time in response to user interactions or other factors. State is crucial for creating dynamic and interactive user interfaces."
        },
        {
            "id": 28,
            "question": "Is that possible to use JSX without React.JS?",
            "answer": "JSX is a syntax extension for JavaScript that is commonly associated with React.js. While it is most commonly used with React, JSX itself is not limited to React. It can be transpiled by tools like Babel to work with other libraries or frameworks or used in plain JavaScript projects."
        },
        {
            "id": 29,
            "question": "What is Babel? What is a transpiler?",
            "answer": "Babel is a JavaScript compiler that allows developers to use the latest ECMAScript features in their code and transform it into a version of JavaScript that is compatible with most browsers. A transpiler is a type of compiler specifically designed to convert source code from one version of a programming language to another."
        },
        {
            "id": 30,
            "question": "What is conditional Rendering?",
            "answer": "Conditional rendering in React involves rendering different components or content based on certain conditions. It allows developers to display different UI elements depending on the state or props of a component. Common techniques for conditional rendering include using the ternary operator or logical && operator."
        },
        {
            "id": 31,
            "question": "What is the role of Fragment?",
            "answer": "A Fragment in React is a way to group multiple elements without adding an extra node to the DOM. It is particularly useful when a component needs to return multiple elements, and a wrapping div or other container would interfere with the desired layout. Fragments improve the cleanliness and structure of the rendered HTML."
        },
        {
            "id": 32,
            "question": "How does DOM work in React.JS?",
            "answer": "In React.js, the DOM (Document Object Model) is represented as a virtual DOM. When a component's state or props change, React calculates the minimum number of changes needed in the virtual DOM and updates only those elements. The virtual DOM changes are then efficiently reconciled with the real DOM for rendering."
        }
    ],
    "Javascript": [
        {
            "id": 1,
            "question": "Is JavaScript single-threaded or multithreaded?",
            "answer": "JavaScript is single-threaded. It means that it executes one operation at a time, making it synchronous. However, asynchronous operations can be achieved using features like callbacks, promises, and async/await."
        },
        {
            "id": 2,
            "question": "How does NodeJS use in the backend? Why not others?",
            "answer": "NodeJS is used in the backend to build scalable and high-performance server-side applications. It utilizes a non-blocking, event-driven architecture that makes it well-suited for handling many simultaneous connections. This is particularly useful for I/O-heavy tasks like handling HTTP requests. NodeJS is chosen for its efficiency and ability to handle a large number of concurrent connections."
        },
        {
            "id": 3,
            "question": "What is the difference between cluster and child process model?",
            "answer": "In NodeJS, the cluster module allows the creation of child processes to distribute the load across multiple CPU cores. The child process model involves creating separate instances of the NodeJS process to handle specific tasks. The cluster model, on the other hand, involves creating multiple instances of the entire application to utilize multiple CPU cores. Both aim to improve performance and scalability."
        },
        {
            "id": 4,
            "question": "Tell me about call, bind, and apply methods?",
            "answer": "Call, bind, and apply are methods used to manipulate the context of a function in JavaScript. Call and apply are similar; they invoke a function with a specific 'this' context and can pass arguments. Bind, however, creates a new function with a specified 'this' context but does not invoke it immediately. It is commonly used for setting the 'this' value in event handlers."
        },
        {
            "id": 5,
            "question": "What do you know about 'this' keyword? What does it do?",
            "answer": "'This' in JavaScript refers to the current execution context of a function. It is a special keyword that is dynamically scoped and can vary based on how the function is called. In most cases, 'this' refers to the object that owns the function, but it can behave differently in various situations."
        },
        {
            "id": 6,
            "question": "What is the difference between callback and return?",
            "answer": "A callback is a function passed as an argument to another function, to be executed later. It is often used in asynchronous programming. 'Return,' on the other hand, is used to end the execution of a function and can provide a value back to the calling code. Callbacks are often used to handle asynchronous operations and ensure proper execution order."
        },
        {
            "id": 7,
            "question": "What is Higher Order Function?",
            "answer": "A Higher Order Function is a function that takes one or more functions as arguments or returns a function as its result. These functions can manipulate other functions by modifying their behavior or extending their functionality. Examples include functions like 'map,' 'filter,' and 'reduce.'"
        },
        {
            "id": 8,
            "question": "What is the difference between event loop and event queue?",
            "answer": "The event loop is a continuous process that constantly checks the message queue for new events to execute. The event queue is a data structure that holds messages or events to be processed by the event loop. The event loop picks up messages from the queue and processes them one by one, ensuring asynchronous operations are handled in a non-blocking manner."
        },
        {
            "id": 9,
            "question": "What is the data type in JavaScript?",
            "answer": "JavaScript has six primitive data types: Undefined, Null, Boolean, Number, String, and Symbol (added in ECMAScript 6). Additionally, there is the Object data type, which includes functions, arrays, and objects."
        },
        {
            "id": 10,
            "question": "What is 'undefined' and 'define' variable?",
            "answer": "'Undefined' in JavaScript is a primitive value assigned to variables that are declared but not initialized. 'Define' is not a standard term in JavaScript. Perhaps you meant 'declaring' a variable, which is the act of creating a variable using 'var,' 'let,' or 'const' without assigning a value to it."
        },
        {
            "id": 11,
            "question": "What is default parameters? Why does it use?",
            "answer": "Default parameters in JavaScript allow you to specify default values for function parameters if no value or 'undefined' is passed. This ensures that the function behaves predictably, even if not all parameters are provided. It's particularly useful when some parameters are optional."
        },
        {
            "id": 12,
            "question": "Is there any difference between '===' and '=='?",
            "answer": "'===' is the strict equality operator in JavaScript, which checks both value and type equality. '==' is the loose equality operator, which performs type coercion if necessary. It's generally recommended to use '===' to avoid unexpected type conversions."
        },
        {
            "id": 13,
            "question": "What is the JavaScript scope?",
            "answer": "The scope in JavaScript refers to the region of code where a variable can be accessed or modified. There are two types of scope: global scope and local scope. Variables declared outside any function or block have global scope, while those declared inside a function or block have local scope."
        },
        {
            "id": 14,
            "question": "What is the difference among global scope, block scope, functional scope, and lexical scope?",
            "answer": "Global scope refers to variables declared outside any function or block and is accessible throughout the entire program. Block scope refers to variables declared within curly braces ('{}') and is limited to that block. Functional scope refers to variables declared inside a function. Lexical scope means that a variable's scope is determined by its location in the source code."
        },
        {
            "id": 15,
            "question": "Is JavaScript synchronous or asynchronous? How does it work?",
            "answer": "JavaScript is single-threaded and synchronous in nature. However, it employs asynchronous programming through features like callbacks, promises, and async/await. Asynchronous operations allow non-blocking execution, enabling the program to perform tasks concurrently without waiting for one to finish before starting another."
        },
        {
            "id": 16,
            "question": "Tell me about ES6 advance topics? Which are you using?",
            "answer": "ES6 (ECMAScript 2015) introduced several advanced features to JavaScript, including arrow functions, template literals, destructuring assignment, let and const declarations, classes, modules, and more. I use a variety of these features depending on the specific requirements of the project."
        },
        {
            "id": 17,
            "question": "What do you know about prototype chain?",
            "answer": "In JavaScript, every object has a prototype chain, which is a way to achieve inheritance. Objects inherit properties and methods from their prototype, and this chain continues until the prototype is null. The prototype chain allows objects to share functionality and helps in creating efficient, memory-saving code."
        },
        {
            "id": 18,
            "question": "How many arguments does call, apply, bind take?",
            "answer": "The `call` and `apply` methods take two arguments: the value of 'this' and the function arguments passed individually or as an array, respectively. The `bind` method also takes the value of 'this' as its first argument but returns a new function with the specified 'this' value bound, and any subsequent arguments are partially applied to the new function."
        },
        {
            "id": 19,
            "question": "What is event bubbling in JavaScript?",
            "answer": "Event bubbling is a phase in the event propagation process where the event starts from the target element and bubbles up through its ancestors in the DOM hierarchy. This allows parent elements to catch the same event, making it useful for delegating event handling to a common ancestor."
        },
        {
            "id": 20,
            "question": "What is a recursive function?",
            "answer": "A recursive function is a function that calls itself, either directly or indirectly, to solve a smaller instance of the same problem. It involves breaking down a problem into smaller subproblems and solving them until a base case is reached. Recursion is a powerful and elegant technique but should be used judiciously to avoid stack overflow errors."
        },
        {
            "id": 21,
            "question": "How does the spread operator work?",
            "answer": "The spread operator (`...`) in JavaScript is used to spread the elements of an iterable (e.g., an array or string) or the properties of an object. It creates a shallow copy of the original iterable or object. The spread operator is commonly used for array and object destructuring, combining arrays, and cloning objects."
        },
        {
            "id": 22,
            "question": "What is closure? How does it work?",
            "answer": "A closure is a function that retains access to variables from its outer (enclosing) scope, even after the outer function has finished executing. This allows the inner function to access and manipulate the outer function's variables. Closures are created whenever a function is defined within another function."
        },
        {
            "id": 23,
            "question": "What is inheritance in JavaScript?",
            "answer": "Inheritance in JavaScript allows one object to inherit properties and methods from another object. This is achieved using prototypes. Objects can share and reuse code by creating a prototype chain, where objects inherit from other objects. This helps in achieving code reusability and a clean organizational structure."
        },
        {
            "id": 24,
            "question": "What is object inheritance?",
            "answer": "Object inheritance in JavaScript refers to the ability of one object to inherit properties and methods from another object. Objects in JavaScript are instances of constructors, and they can inherit properties and methods from their constructor's prototype. This forms a prototype chain, allowing objects to share and reuse functionality."
        },
        {
            "id": 25,
            "question": "How does JS code work on the browser? Explain it step by step procedure",
            "answer": "When a JavaScript code is executed in the browser, it goes through the following steps:\n\n1. **Loading**: The browser loads the HTML file, and when encountering a script tag, it fetches and loads the JavaScript file.\n2. **Parsing**: The browser parses the JavaScript code to create an abstract syntax tree (AST).\n3. **Compilation**: The AST is compiled into machine code or bytecode by the browser's JavaScript engine.\n4. **Execution**: The compiled code is executed, and any changes to the Document Object Model (DOM) or styling are reflected on the webpage."
        },
        {
            "id": 26,
            "question": "How do push and pop methods work?",
            "answer": "The `push` method in JavaScript is used to add one or more elements to the end of an array, and the `pop` method is used to remove the last element from the end of an array. These methods modify the original array and return the new length of the array after the modification."
        },
        {
            "id": 27,
            "question": "Array vs Linked List?",
            "answer": "Arrays and linked lists are both data structures, but they have different characteristics. Arrays have a fixed size, constant time access to elements using an index, but insertion and deletion can be slower. Linked lists have dynamic size, efficient insertion and deletion, but accessing elements requires traversing the list."
        },
        {
            "id": 28,
            "question": "What is the relation between class and object?",
            "answer": "In object-oriented programming, a class is a blueprint or template for creating objects. Objects are instances of a class, and each object created from the class has the same structure and behavior defined by the class. The class defines the properties and methods that its objects will have."
        },
        {
            "id": 29,
            "question": "What do you know about functional and object-oriented programming?",
            "answer": "Functional programming (FP) and object-oriented programming (OOP) are two paradigms in programming. FP focuses on using functions to perform computations and avoiding changing state or mutable data. OOP is centered around objects that encapsulate data and behavior. JavaScript supports both paradigms, allowing developers to use a combination of functional and OOP techniques."
        },
        {
            "id": 30,
            "question": "Why is JavaScript faster even as a single thread?",
            "answer": "JavaScript's speed is attributed to its event-driven, non-blocking, and asynchronous nature. It uses features like the event loop, callbacks, and promises to efficiently manage tasks without waiting for blocking operations to complete. This allows JavaScript to handle multiple operations concurrently, providing the appearance of parallelism without the complexity of multithreading."
        },
        {
            "id": 31,
            "question": "Explain about method chaining?",
            "answer": "Method chaining is a programming technique where multiple methods are called on an object in a single line, each method returning an object that can be used for the next method call. This leads to cleaner and more concise code, enhancing readability and maintainability. It is commonly used in JavaScript with methods that modify or manipulate an object, such as array methods or jQuery methods."
        },
        {
            "id": 32,
            "question": "Explain async/await, synchronous, asynchronous, promises? How do they work?",
            "answer": "- Synchronous: Code executes line by line, and each operation must complete before the next one starts.\n- Asynchronous: Operations can start but not necessarily complete before moving to the next line. Callbacks or Promises are often used to handle asynchronous operations.\n- Promises: Objects representing the eventual completion or failure of an asynchronous operation. They have states (pending, fulfilled, rejected) and help manage asynchronous code.\n- async/await: Syntactic sugar for working with Promises. `async` declares an asynchronous function, and `await` is used within that function to pause execution until a Promise is resolved, improving the readability of asynchronous code."
        },
        {
            "id": 33,
            "question": "What is the difference between slice and splice?",
            "answer": "- `slice()`: Returns a shallow copy of a portion of an array without modifying the original array. It takes two arguments, the start, and end indices.\n- `splice()`: Modifies the contents of an array by removing or replacing existing elements and/or adding new elements. It takes three arguments, the start index, the number of elements to remove, and optional elements to add."
        }
    ]
}